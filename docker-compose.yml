version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: microservice
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d microservice -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
      RABBITMQ_LOAD_DEFINITIONS: /etc/rabbitmq/definitions.json
    volumes:
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
      - rabbitmq_data:/var/lib/rabbitmq

  migrate:
    image: migrate/migrate:4
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./db/migrations:/migrations:ro
    command:
      [
        "-path", "/migrations",
        "-database", "postgres://postgres:postgres@postgres:5432/microservice?sslmode=disable",
        "up"
      ]
    restart: "no"

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    environment:
      HTTP_PORT: 8080
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/microservice?sslmode=disable
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      LOG_LEVEL: info
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/microservice?sslmode=disable
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      LOG_LEVEL: info
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully

volumes:
  pgdata:
  rabbitmq_data:
